<%-- 
Name:Model模板
Author: 
Description: 实体层模板
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="" Debug="False" ResponseEncoding="UTF-8" Description="Template description here." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Assembly Name="System.Design" %>

<%@ Property Name="Table" Type="SchemaExplorer.TableSchema" Default="" Optional="False" Category="数据库信息" Description="数据库表" %>
<%@ Property Name="Author" Type="System.String" Default="" Optional="True" Category="基本信息" Description="作者" %>
<%@ Property Name="ObjectName" Type="String" Category="注释" Description="对象名称，为生成注释而用" %>
<%@ Property Name="SystemNameSpace" Type="System.String" Default="" Optional="True" Category="基本信息" Description="系统命名空间" %>
<%@ Property Name="SubSystemNameSpace" Type="System.String" Default="" Optional="False" Category="基本信息" Description="子系统命名空间" %>
#region CopyRight
// -----------------------------------------------------------------------------------
// 版权声明： 
// 使用声明： 任何组织和个人未经许可不得擅自复制或更改其内容
// 软件版本： 1.0
// 公司地址： 
// 公司电话： ***
// -----------------------------------------------------------------------------------
#endregion

using System;
using System.Collections.Generic;

using <%=SystemNameSpace%>.Model;

namespace <%=SystemNameSpace%>.Model.<%=SubSystemNameSpace%>
{
	///<summary>
	///<summary><%=ObjectName%>对象</summary>
	///<creator><%=Author%></creator>
	///<createdate><%=NowDate()%></createdate>
	///<modifier></modifier>
	///<modifynote></modifynote>
    ///<modifydate></modifydate>
    ///<other></other>    
	///</summary>
	[Serializable]
	public class <%=Table.Name%>Info : BaseModel
	{
		#region 构造函数
		
		///<summary>
		///构造函数
		///</summary>
		public <%=Table.Name%>Info()
		{
			
		}
		
		#endregion
		
		#region 基础属性
		
		<%
		    ColumnSchemaCollection columns = Table.Columns;
			foreach(ColumnSchema c in columns)
			{
				string strProperty;
				strProperty = "\t\t///<summary>\n";
				strProperty += "\t\t///"+c.Description+"\n";
				strProperty += "\t\t///</summary>\n";
				//strProperty += "\t\t[Column(";
				if(c.NativeType.ToLower().Equals("text"))
				{
					strProperty += ", UpdateCheck = UpdateCheck.Never";
				}
				//if(c.IsPrimaryKeyMember)
				//{
					//strProperty += ", IsPrimaryKey = true";
				//}
				//if(c.Name == "ID")
				//{
					//strProperty += ", IsDbGenerated = true";
				//}
				//strProperty += ")]\n";
				
				strProperty += "\t\tpublic "+GetSimpleType(c)+" ";
				strProperty += c.Name+" { get; set; }";
				strProperty += "\n\n";
				
				strProperty = strProperty.Replace(",,","");
				strProperty = strProperty.Replace("(, ","(");
				strProperty = strProperty.Replace("()","");
				Response.Write(strProperty);
			}
		%>
		
		#endregion
		
		#region 扩展属性
		
		#endregion
	}
}

<script runat="template">
public string GetSimpleType(ColumnSchema column)
{
	if(column.Name.EndsWith("TypeCode"))return column.Name;
	string strType = "Varchar";
	
	switch(column.DataType)
	{
		case DbType.Boolean: strType = "bool";break;
		case DbType.Binary: strType = "byte[]";break;
		case DbType.Date:strType = "DateTime";break;
		case DbType.Time: strType = "DateTime";break;
		case DbType.DateTime: strType = "DateTime";break;
		case DbType.Byte:
		case DbType.Currency:
		case DbType.Int16: strType = "short";break;
		case DbType.Int32:strType = "int";break;
		case DbType.Int64:strType = "long";break;
		case DbType.Single: strType = "int";break;
		case DbType.String:strType = "string";break;
        case DbType.UInt16:strType = "bool";break;
        case DbType.Decimal:strType = "decimal";break;
            
		default:
		{
			strType = Enum.GetName(typeof(DbType),column.DataType);break;
		}
	}
	
	return strType;
}

///<summary>
///获取当前时间
///</summary>
///<returns>时间字符串</returns>
public string NowDate()
{
	return DateTime.Now.ToString("yyyy-MM-dd");
}

///<summary>
///获取后缀
///</summary>
///<returns>后缀字符串</returns>
public string GetSuffix(string strNameSpace)
{
	if(strNameSpace=="") throw new Exception("Some property is required!");
	return "."+strNameSpace+"DB";
}

///<summary>
///获取带DB后缀
///</summary>
///<returns>后缀字符串</returns>
public string GetSuffix2(string strNameSpace)
{
	if(strNameSpace=="") throw new Exception("Some property is required!");
	return "."+strNameSpace;
}
///<summary>
///获取前缀
///</summary>
///<returns>前缀字符串</returns>
public string GetPrefix(string strNameSpace)
{
	if(strNameSpace=="") throw new Exception("Some property is required!");
	return strNameSpace+"DB";
}

</script>