<%-- 
Name: 数据访问层代码生成模版
Description: 根据数据库的内容生成模型层代码
--%>

<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8"%>
<%@ Property Name="Table" Type="SchemaExplorer.TableSchema" Category="内容" Description="数据源表" %>
<%@ Property Name="ObjectName" Type="String" Category="注释" Description="对象名称，为生成注释而用" %>
<%@ Property Name="SystemNamespace" Type="String" Category="输入参数" Description="这是一个字符串型的参数" %>
<%@ Property Name="SubNamespace" Type="String" Category="输入参数" Description="这是一个字符串型的参数" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="Author" Type="System.String" Default="" Optional="True" Category="基本信息" Description="作者" %>
#region CopyRight
// -----------------------------------------------------------------------------------
// 版权声明： 
// 使用声明： 任何组织和个人未经许可不得擅自复制或更改其内容
// 软件版本： 1.0
// 公司地址： 
// 公司电话： ***
// -----------------------------------------------------------------------------------
#endregion

using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data;
using System.Text;
using System.Linq;

using ClassLibrary.ExceptionHandling;
using ClassLibrary.Utility.Common;
using <%=SystemNamespace%>.Configuration;
using <%=SystemNamespace%>.Interface.DataAccess.<%=SubNamespace%>;
using <%=SystemNamespace%>.Model.<%=SubNamespace%>;
using <%=SystemNamespace%>.DataAccess.MySql;

namespace <%=SystemNamespace%>.DataAccess.MySql.<%=SubNamespace%>
{
    ///<summary>
	///<summary><%=ObjectName%>数据访问对象</summary>
	///<creator><%=Author%></creator>
	///<createdate><%=NowDate()%></createdate>
	///<modifier></modifier>
	///<modifynote></modifynote>
    ///<modifydate></modifydate>
    ///<other></other>    
	///</summary>
    public class <%=Table.Name %> : DataAccessBase, I<%=Table.Name %>
    {
    	/// <summary>
    	/// 新增<%=ObjectName%>
    	/// </summary>
    	/// <param name="<%=GetModelParameterName()%>Info"><%=ObjectName%>对象</param>
    	public void Add(<%=GetModelName()%>Info <%=GetModelParameterName()%>Info)
    	{
    		string commandText = <%=GetInsertSql()%>;
            
            try
            {
                base.Execute(commandText, connectionString: CarManageConfig.Instance.ConnectionString, param: <%=GetModelParameterName()%>Info);
            }
            catch (Exception ex)
            {
                DataAccessExceptionHandler.HandlerException("新增<%=ObjectName%>失败！", ex);
            }
    	}
    	
    	/// <summary>
    	/// 更新<%=ObjectName%>
    	/// </summary>
    	/// <param name="<%=GetModelParameterName()%>Info"><%=ObjectName%>对象</param>
    	public void Update(<%=GetModelName()%>Info <%=GetModelParameterName()%>Info)
    	{
    		string commandText = <%=GetUpdateSql()%>;
    		
    		try
            {
        		base.Execute(commandText, connectionString: CarManageConfig.Instance.ConnectionString, param: <%=GetModelParameterName()%>Info);
            }
            catch (Exception ex)
            {
                DataAccessExceptionHandler.HandlerException("更新<%=ObjectName%>失败！", ex);
            }
    	} 
    	
    	/// <summary>
    	/// 根据主键删除指定<%=ObjectName%>数据
    	/// </summary>
    	/// <param name="<%=GetPrimaryKeyFieldName()%>"><%=ObjectName%>Id</param>
    	public void Delete(<%=GetPrimaryKeyType()%> <%=GetPrimaryKeyFieldName()%>)
    	{
    		string commandText = "DELETE FROM <%=Table.Name%> WHERE <%=GetPrimaryKeyName()%>=@<%=GetPrimaryKeyName()%>";
            
    		try
            {
        		base.Execute(commandText, connectionString: CarManageConfig.Instance.ConnectionString, param: new { <%=GetPrimaryKeyName()%> = <%=GetPrimaryKeyFieldName()%> });
            }
            catch (Exception ex)
            {
                DataAccessExceptionHandler.HandlerException("删除<%=ObjectName%>失败！", ex);
            }
    	}
        
    	/// <summary>
        /// 根据主键获取<%=ObjectName%>实体数据
        /// </summary>
        /// <param name="recordId">主键</param>
        /// <returns>返回产品实体类。如果没有符合条件的数据则返回null。</returns>
        public <%=GetModelName()%>Info Load(<%=GetPrimaryKeyType()%> <%=GetPrimaryKeyFieldName()%>)
        {
            <%=GetModelName()%>Info <%=GetModelParameterName()%>Info = null;
            IDbConnection connection = null;
            string commandText = "SELECT * FROM <%=Table.Name %> WHERE <%=GetPrimaryKeyName()%>=@<%=GetPrimaryKeyName()%>";

            try
            {
                connection = base.CreateConnection(CarManageConfig.Instance.ConnectionString);
				<%=GetModelParameterName()%>Info = base.Load<<%=GetModelName()%>Info>(commandText, connection, param: new { <%=GetPrimaryKeyName()%> = <%=GetPrimaryKeyFieldName()%> });
            }
            catch (Exception ex)
            {
                DataAccessExceptionHandler.HandlerException(
                    "读取<%=ObjectName%>详细信息失败！", ex);
            }
            finally
            {
                CloseConnection(connection);
            }

            return <%=GetModelParameterName()%>Info;
        }
        
        
    	/// <summary>
    	/// 获得所有<%=ObjectName%>集合
    	/// </summary>
    	/// <returns><%=ObjectName%>集合</returns>
    	public List<<%=Table.Name %>Info> Search(<%=Table.Name %>Info queryInfo)
    	{			
            List<<%=Table.Name %>Info> <%=Table.Name.ToLower() %>List =new List<<%=Table.Name %>Info>();
            
			try
            {
				string field = "*";

                string table = "<%=Table.Name %>";
                string order = "ORDER BY <%=GetPrimaryKeyName()%>";

                StringBuilder filter = new StringBuilder();
                
                #region 查询条件
                
                
                #endregion

                string filterText = string.Empty;

                if (filter.Length > 0)
                {
                    filterText = filter.ToString().TrimStart(' ').Remove(0, 3).Insert(0, " WHERE ");
                }

                string commandText = string.Format("SELECT COUNT(*) FROM <%=Table.Name %> {0}", filterText);
                
                IDbConnection connection = base.CreateConnection(CarManageConfig.Instance.ConnectionString);

                queryInfo.TotalCount = base.ExecuteObject<int>(commandText: commandText, connection: connection, param: queryInfo);

                if (queryInfo.TotalCount.Equals(0))
                    return <%=Table.Name.ToLower() %>List;

                int pageCount = queryInfo.TotalCount / queryInfo.PageSize + 1;

                if (queryInfo.TotalCount % queryInfo.PageSize != 0)
                    pageCount++;

                int startIndex = queryInfo.PageIndex * queryInfo.PageSize;

                commandText = string.Format("SELECT {0} FROM {1} WHERE {2} ORDER BY {3} LIMIT {4},{5}",
                    field, table, filterText, order, startIndex, queryInfo.PageSize);

                <%=Table.Name.ToLower() %>List = base.Query<<%=Table.Name %>Info>(commandText, connection, param: startIndex).ToList();
            }
            catch (Exception ex)
            {
                DataAccessExceptionHandler.HandlerException(
                    "查询<%=ObjectName%>失败！", ex);
            }
            
            return <%=Table.Name.ToLower() %>List;
    	}
    }
}


<script runat="template">
    ///<summary>
    ///获取当前时间
    ///</summary>
    ///<returns>时间字符串</returns>
    public string NowDate()
    {
    	return DateTime.Now.ToString("yyyy-MM-dd");
    }

	public string GetClassName()
	{
		string tempTable;
		if (Table.Name.EndsWith("s"))
		{
			tempTable = Table.Name.Substring(0,Table.Name.Length-1);
		}
		else
		{
			tempTable = Table.Name;
		}
		return tempTable;
	}
	
	public string GetModelName()
	{
		return ConvertToPascal(GetClassName());
	}
	
	public string GetModelParameterName()
	{
		return ConvertToCamel(GetClassName());
	}
    
	public string GetPrimaryKeyType()
	{
		if (Table.PrimaryKey != null)
		{
			if (Table.PrimaryKey.MemberColumns.Count == 1)
			{
				return GetCSharpDataTypeByDBColumn(Table.PrimaryKey.MemberColumns[0]);
			}
			else
			{
				throw new ApplicationException("此模板只支持单个列的主键");
			}
		}
		else
		{
			throw new ApplicationException("此模板需要有主键的表");
		}
	}
	
	public ColumnSchema GetPrimaryKeyColumn()
	{
		if (Table.PrimaryKey != null)
		{
			if (Table.PrimaryKey.MemberColumns.Count == 1)
			{
				return Table.PrimaryKey.MemberColumns[0];
			}
			else
			{
				throw new ApplicationException("此模板只支持单个列的主键");
			}
		}
		else
		{
			throw new ApplicationException("此模板需要有主键的表");
		}
	}
	
	public string GetPrimaryKeyName()
	{
		if (Table.PrimaryKey != null)
		{
			if (Table.PrimaryKey.MemberColumns.Count == 1)
			{
				return Table.PrimaryKey.MemberColumns[0].Name;
			}
			else
			{
				throw new ApplicationException("此模板只支持单个列的主键");
			}
		}
		else
		{
			throw new ApplicationException("此模板需要有主键的表");
		}
	}
	
	public string GetPrimaryKeySize()
	{
		return Table.PrimaryKey.MemberColumns[0].Size.ToString();
	}
	
	public string GetPrimaryKeySqlDbType()
	{
		return GetDbType(Table.PrimaryKey.MemberColumns[0]);
	}
	
	public string GetPrimaryKeyFieldName()
	{
		return ConvertToCamel(GetPrimaryKeyName());
	}
	
	public string GetPrimaryKeyPropertyName()
	{
		return ConvertToPascal(GetPrimaryKeyName());
	}
	
	public string GetInsertSql()
	{
		string sql = "\"INSERT INTO " + Table.Name + "(";
		foreach(ColumnSchema column in Table.Columns)
		{
			sql += column.Name + ",";
		}
		sql = sql.Substring(0,sql.Length-1);
		sql += ")\" +\n";
		
		sql += "\t\t\t\t\" VALUES(";
		foreach(ColumnSchema column in Table.Columns)
		{
			sql += "@" + column.Name + ",";
		}
		sql = sql.Substring(0,sql.Length-1);
		sql += ")\"";
		
		return sql;
	}
	
	public string GetUpdateSql()
	{
		string sql = "\"UPDATE " + Table.Name + " SET \" \n";
		sql += "\t\t\t\t+ \"";
		foreach(ColumnSchema column in Table.NonPrimaryKeyColumns)
		{
			sql += column.Name + "=@" + column.Name + ",";
		}
		sql = sql.Substring(0,sql.Length-1);
		sql += " \" +\n";
		
		sql += "\t\t\t\t\"WHERE " + GetPrimaryKeyName() + "=@" + GetPrimaryKeyName() + "\"";
		
		return sql;
	}
	
	public string GetSelectOneModelSql()
	{
		string sql = "\"SELECT * FROM "+ Table.Name +" WHERE " 
            + GetPrimaryKeyName() + "=@" + GetPrimaryKeyName() + "\"";
		
		return sql;
	}
	
    public string GetSelectModelSql()
	{
		string sql = "\"SELECT * FROM " + Table.Name + " WHERE 1=1 \"";
		
		return sql;
	}
    
	public string GetSelectAllModelSql()
	{
		string sql = "\"SELECT * FROM " + Table.Name + "\"";
		
		return sql;
	}

	
	public string GetCSharpDataTypeByDBColumn(ColumnSchema column)
	{
		switch (column.DataType)
		{
			case DbType.AnsiString: return "string";
			case DbType.AnsiStringFixedLength: return "string";
			case DbType.Binary: return "byte[]";
			case DbType.Boolean: return "bool";
			case DbType.Byte: return "byte";
			case DbType.Currency: return "decimal";
			case DbType.Date: return "DateTime";
			case DbType.DateTime: return "DateTime";
			case DbType.Decimal: return "decimal";
			case DbType.Double: return "double";
			case DbType.Guid: return "Guid";
			case DbType.Int16: return "short";
			case DbType.Int32: return "int";
			case DbType.Int64: return "long";
			case DbType.Object: return "object";
			case DbType.SByte: return "sbyte";
			case DbType.Single: return "float";
			case DbType.String: return "string";
			case DbType.StringFixedLength: return "string";
			case DbType.Time: return "TimeSpan";
			case DbType.UInt16: return "ushort";
			case DbType.UInt32: return "uint";
			case DbType.UInt64: return "ulong";
			case DbType.VarNumeric: return "decimal";
			default:
			{
				return "__UNKNOWN__" + column.NativeType;
			}
		}
	}
	public string GetDbType(ColumnSchema column)
	{
		switch (column.NativeType.ToLower())
		{
			case "bigint": return "Int64";
			case "binary": return "Binary";
			case "bit": return "Boolean";
			case "char": return "AnsiStringFixedLength";
			case "datetime": return "DateTime";
			case "decimal": return "Decimal";
			case "float": return "Double";
			case "image": return "Image";
			case "int": return "Int32";
			case "money": return "Currency";
			case "nchar": return "StringFixedLength";
			case "ntext": return "String";
			case "numeric": return "Decimal";
			case "nvarchar": return "String";
			case "real": return "Single";
			case "smalldatetime": return "DateTime";
			case "smallint": return "Int16";
			case "smallmoney": return "Currency";
			case "sql_variant": return "Object";
			case "sysname": return "StringFixedLength";
			case "text": return "String";
			case "timestamp": return "Timestamp";
			case "tinyint": return "Byte";
			case "uniqueidentifier": return "Guid";
			case "varbinary": return "Binary";
			case "varchar": return "String";
			default: return "__UNKNOWN__" + column.NativeType;
		}
	}
    
	public string GetSqlDbType(ColumnSchema column)
	{
		switch (column.NativeType.ToLower())
		{
			case "bigint": return "BigInt";
			case "binary": return "Binary";
			case "bit": return "Bit";
			case "char": return "Char";
			case "datetime": return "DateTime";
			case "decimal": return "Decimal";
			case "float": return "Float";
			case "image": return "Image";
			case "int": return "Int";
			case "money": return "Money";
			case "nchar": return "NChar";
			case "ntext": return "NText";
			case "numeric": return "Decimal";
			case "nvarchar": return "NVarChar";
			case "real": return "Real";
			case "smalldatetime": return "SmallDateTime";
			case "smallint": return "SmallInt";
			case "smallmoney": return "SmallMoney";
			case "sql_variant": return "Variant";
			case "sysname": return "NChar";
			case "text": return "Text";
			case "timestamp": return "Timestamp";
			case "tinyint": return "TinyInt";
			case "uniqueidentifier": return "UniqueIdentifier";
			case "varbinary": return "VarBinary";
			case "varchar": return "VarChar";
			default: return "__UNKNOWN__" + column.NativeType;
		}
	}
	
	public string ConvertToPascal(string str)
	{
		return str.Substring(0,1).ToUpper() + str.Substring(1);
	}
	
	public string ConvertToCamel(string str)
	{
		return str.Substring(0,1).ToLower() + str.Substring(1);
	}
	
	public override string GetFileName()
	{
		return GetModelName() + "Service.cs";
	}
    
    public string GetPropertyNameByColumn(ColumnSchema column)
	{
		return ConvertToPascal(column.Name);
	}
</script>
